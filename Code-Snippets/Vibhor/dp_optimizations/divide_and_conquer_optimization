#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define rep(i,a) for(ll i=0;i<a;++i)
#define repp(i,a,b) for(ll i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define    foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
ll M=1e9+7;



ll mpe(ll base, ll exponent, ll modulus)
{
    ll result = 1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = result*base%modulus ;
        exponent = exponent >> 1;
        base =  base*base%modulus ;
    }
    return result;
}

//http://codeforces.com/problemset/problem/673/E

//dp[i][j]=min(dp[i-i][l] + cost[l+1][j])

ll arr[200005],sum[200005];
double dbl[200005],pre[200005];
double an[52][200005];
double cost(ll i,ll j){
    double res=pre[j]-pre[i-1]-((dbl[j]-dbl[i-1])*(sum[i-1]));
    return res;
}

void compute(int k,int l,int r,int opl,int opr){
    if(l==r){
        an[k][l]=10000000000000000;
        int kwi=opl; //kwi="kaatne walla index"
        while(kwi<=opr && kwi<r){
            an[k][l]=min(an[k-1][kwi]+cost(kwi+1,r),an[k][l]);
            kwi++;
        }
       // cout<<l<<"  "<<opl<<"  "<<an[k][l]<<endl;
        return;
    }
    int mid=(l+r)/2,opv=opl,kwi=opl;
    an[k][mid]=10000000000000000;
    for(kwi=opl;kwi<=opr && kwi<mid;kwi++){
        if(an[k-1][kwi]+cost(kwi+1,mid) < an[k][mid]){
            an[k][mid]=an[k-1][kwi]+cost(kwi+1,mid);
            opv=kwi;
        }
    }

  //  cout<<opv<<"  "<<mid<<"  "<<an[k][mid]<<endl;
    if(mid-1>=l)
    compute(k,l,mid-1,opl,opv);
    if(mid+1<=r)
    compute(k,mid+1,r,opv,opr);

}

int main()
{
    ll n,k;
    cin>>n>>k;
    rep(i,n)cin>>arr[i+1];
    dbl[0]=0.00000000000000;
    sum[0]=0;
    repp(i,1,n+1){
        dbl[i]=dbl[i-1]+(1.0/(1.0*arr[i]));
        sum[i]=sum[i-1]+arr[i];
        pre[i]=pre[i-1]+(sum[i]/(1.0*arr[i]));
    }


    repp(i,1,n+1){an[0][i]=10000000000000;an[1][i]=cost(1,i);}
    repp(i,2,k+1)compute(i,1,n,i-1,n-1);
    printf("%0.7lf",an[k][n]);

    return 0;
}
